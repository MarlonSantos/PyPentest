
from rich.style import Style
from rich.progress import Progress
from rich.progress import track
from rich.progress import (BarColumn,Progress,SpinnerColumn,TaskProgressColumn,TimeElapsedColumn,)
from rich.prompt import Prompt
from rich import print
import typer
from scapy.all import *
from scapy.layers.dns import DNS, DNSQR
from scapy.layers.inet import IP, UDP, TCP
import ipaddress
import time
import sys

#<<<<<<<<<<< Vars & Constants >>>>>>>>>>>>>
# Text color
clr = 'blue'

response = ''
# Define custom progress bar
progress_columns = (
    SpinnerColumn(),
    "[progress.description]{task.description}",
    BarColumn(complete_style = Style(color="#45f542"),finished_style = Style(color="#130454")),
    TaskProgressColumn(text_format = "[progress.percentage][bold blue]{task.percentage:>3.0f}%"),
    "Elapsed:",
    TimeElapsedColumn(),
)
#<<<<<<<<<<< Functions >>>>>>>>>>>>>

def resp():
    global response
    print(response)
    response = ''

# Progress bar function
def pb(func,par='',total=100):
    with Progress(*progress_columns) as progress_bar:
        task = progress_bar.add_task(f"[blue]{func.__name__} running...", total=total)
        for i in progress_bar.track(func(par), task_id=task):
            pass
        progress_bar.update(task, description=f"[blue]{func.__name__} done.", advance=total)

ports = [25,80,53,443,445,8080,8443]


def SScan(host):
    global response
    # Sends a TCP SYN packet and looks foa a SYN/ACK response.
    ans,unans = sr(
        IP(dst=host)/
        TCP(sport=33333,dport=ports,flags="S")
        ,timeout=2,verbose=0)
    response = f"[{clr}] Open ports at [/{clr}]{host}:"
    for (s,r,) in ans:
        yield s
        if s[TCP].dport == r[TCP].sport and r[TCP].flags=="SA":
            response += " " + str(s[TCP].dport)


def DNScan(host):
    global response
    ans,unans = sr(
        IP(dst=host)/
        UDP(dport=53)/
        DNS(rd=1,qd=DNSQR(qname="google.com"))
        ,timeout=2,verbose=0)
    yield ans
    if ans and ans[UDP]:
        response = f"DNS Server at {host}."
    else:
        response = f"[{clr}] Not found DNS running at [/{clr}]{host}."

def teste():
    for i in range(100):
        yield i


def main():
    while True:
        hostname = Prompt.ask(f"[{clr}] üåê Target host name")
        try:
            ipaddress.ip_address(hostname)
            print(f"[{clr}] üîç Testing < {hostname} > ...")
        except:
            hostname = "0"
            print("[bold red] Invalid host address. Please try again. [/bold red]")  
            pass  

        if hostname != "0":
            pb(SScan,hostname)
            resp()
            pb(DNScan,hostname)
            resp()


            break

#<<<<<<<<<<< Main >>>>>>>>>>>>>
if __name__ == "__main__":
    # app()
    typer.run(main)


