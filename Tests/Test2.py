import time
import inspect
from rich.style import Style
from rich.progress import Progress
from rich.progress import track
from rich.progress import (
    TextColumn,
    BarColumn,
    Progress,
    SpinnerColumn,
    TaskProgressColumn,
    TimeElapsedColumn,
    TimeRemainingColumn,
)


# import random

# def process(chunks):
#     for chunk in chunks:
#         time.sleep(0.1)
#         yield chunk

# chunks = [random.randint(1,20) for _ in range(100)]

progress_columns = (
    SpinnerColumn(),
    "[progress.description]{task.description}",
    BarColumn(complete_style = Style(color="#45f542"),finished_style = Style(color="#130454")),#45f542
    TaskProgressColumn(text_format = "[progress.percentage][bold blue]{task.percentage:>3.0f}%"),
    # TextColumn("[progress.percentage][bold blue]{task.percentage:>3.0f}%"),
    "Elapsed:",
    TimeElapsedColumn(),
    # "Remaining:",
    # TimeRemainingColumn(),
)

def Myfunc(func):
    print(inspect.stack()[0][3])
    print(func.__name__)
    func()

def test():
    for i in range(100):
       time.sleep(0.01) 
    #    print(i)
       yield i





def pb(func,total,inc):
    with Progress(*progress_columns) as progress_bar:
        task = progress_bar.add_task(f"[blue]{func.__name__} running...", total=total)
        for i in progress_bar.track(func(), task_id=task):
            pass
            # progress_bar.update(task1, advance=inc)
        progress_bar.update(task, description=f"[blue]{func.__name__} done.", advance=100)







        # while not progress_bar.finished:
        #     func()

        #     progress_bar.update(task, advance=inc)
        # progress_bar.update(task, description=f"[blue]{func.__name__} done.", advance=100)



pb(test,100,1)
# pb_update(1)
# test()
# Myfunc(test)


# def pb(func,total,inc,iter):
#     with Progress(*progress_columns) as progress_bar:
#         task = progress_bar.add_task(f"[blue]{func.__name__}...", total=total)
#         for chunk in process(chunk):
#             progress_bar.update(task, advance=inc)
#         progress_bar.update(task, description=f"[blue]{func.__name__} done.", advance=100)
