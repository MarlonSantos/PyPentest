import time
# from scapy.all import *
import scapy
import ipaddress
import typer
import sys
from rich.progress import track
from rich.progress import Progress
from rich.style import Style
from rich.progress import (
    BarColumn,
    MofNCompleteColumn,
    Progress,
    TextColumn,
    TimeElapsedColumn,
    TimeRemainingColumn,
)


from rich.progress import Progress
import time
import sys


def ProgressBar(func,description):
    total = 0
    with Progress() as progress:
        task = progress.add_task("[green]Processing...", total=100)
        while not progress.finished:
            progress.update(task, advance=1)
        progress.update(task, description="[blue]Complete Task", advance=100)



# Define custom progress bar
def set_bar(description):
    progress_bar = Progress(
        TextColumn(f"[bold blue]{description}"),
        # TextColumn("[progress.percentage][bold blue]{task.percentage:>3.0f}%"),
        BarColumn(style = Style(color="#321aab"), complete_style = Style(color="#4a4854"), finished_style = Style(color="#130454")),
        # MofNCompleteColumn(separator='/', table_column=None),
        TextColumn("[progress.percentage][bold blue]{task.percentage:>3.0f}%"),
        TextColumn("[bold blue]•"),
        
        # TextColumn("[progress.TimeElapsedColumn][bold blue]{task.finished_time}s"),
        TextColumn("[progress.TimeElapsedColumn][bold blue]{task.elapsed}"),
         TimeElapsedColumn(),
        # TextColumn("[bold blue]•"),
        # TimeRemainingColumn(elapsed_when_finished=True ),
    )
    return progress_bar 

# Progress bar function
def pb(func,msg):
    total = 0
    # progress_bar = set_bar(f"Processing {msg}...")
    # with progress_bar as p:
    with Progress() as p:
        task = p.add_task("[green]Processing...", total=100)
        # for i in p.track(range(100)):
        while not p.finished:
            total = total + 1
            # progress_bar.update(p, description="[blue]Complete Task", advance=100)
            p.update(task, advance=1,description=str(total))
            time.sleep(0.01)
            # func
        p.update(task, description=f"[blue]{msg}", advance=100)



# # Use custom progress bar
# with progress_bar as p:
#     for i in p.track(range(100)):
#         time.sleep(0.01)
#         # Do something here
#         pass



def iterate_user_ids():
    # Let's imagine this is a web API, not a range()
    for i in range(100):
        yield i

# # Progress bar function
# def pb(func,msg,color):
#     total = 0
#     with Progress() as progress:    
#         task1 = progress.add_task(func.__name__,f"[{color}]Processing...", total=100)
#     for value in func:
#         time.sleep(0.01)
#         progress.update(task1, advance=1)




    # with typer.progressbar(func, length=100, label= func.__name__, description ='[green]Processing data') as progress:
    #     for value in progress:
    #         # Fake processing time
    #         time.sleep(0.01)
    #         total += 1
    # print(msg)


# ports = [25,80,53,443,445,8080,8443]
 
# def SynScan(host):
#     ans,unans = sr(
#         IP(dst=host)/
#         TCP(sport=33333,dport=ports,flags="S")
#         ,timeout=2,verbose=0)
#     print("Open ports at %s:" % host)
#     for (s,r,) in ans:
#         if s[TCP].dport == r[TCP].sport and r[TCP].flags=="SA":
#             print(s[TCP].dport)
 
# def DNSScan(host):
#     ans,unans = sr(
#         IP(dst=host)/
#         UDP(dport=53)/
#         DNS(rd=1,qd=DNSQR(qname="google.com"))
#         ,timeout=2,verbose=0)
#     if ans and ans[UDP]:
#         print("DNS Server at %s"%host)
    
# host = input("Enter IP Address: ")
# try:
#     ipaddress.ip_address(host)
# except:
#     print("Invalid address")
#     exit(-1)

def main():
    pb(iterate_user_ids(),"Teste111")

if __name__ == "__main__":
    typer.run(main)



# SynScan(host)
# DNSScan(host)